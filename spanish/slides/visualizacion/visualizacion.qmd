---
title: "Estadística descriptiva y visualización de datos en R"
subtitle: "Especialización en Investigación Científica UNEMI 2024"
author: "Daniel Sánchez Pazmiño"
date: "2024-01-01"
data-format: "YYYY"
format: 
  revealjs:
    theme: simple
    highlight-style: github
    css: styles.css
    font: 
      text: "Lato"
      heading: "Oxanium"
    slide-number: true
    incremental: true
knitr:
  opts_chunk: 
    collapse: true
    echo: true
    message: false
    warning: false
---

```{r}
#| label: setup
#| include: FALSE

library(here)

```

# Estadística descriptiva

- Resume y describe las características de un conjunto de datos mediante medidas numéricas y gráficas

- Se diferencia de la estadística inferencial, que se enfoca en predecir conclusiones sobre una población a partir de una muestra

# Tipos de datos

- **Categóricos**: no se pueden medir numéricamente
  - Nominales: no tienen orden. Ej. colores, género, etc.
  - Ordinales: tienen orden. Ej. nivel de educación, nivel de satisfacción, etc.

- **Cuantitativos**: se pueden medir numéricamente
  - Discretos: valores enteros. Ej. número de hijos, número de estudiantes, etc.
  - Continuos: valores reales. Ej. peso, altura, temperatura, etc.

# Análisis de datos cuantitativos

## Medidas de tendencia central

Las medidas de tendencia central son valores que representan el centro de un conjunto de datos.

- **Media**: promedio de los datos

- **Mediana**: valor que divide a los datos en dos partes iguales

- **Moda**: valor que más se repite

## Media aritmética o promedio

- Se calcula sumando todos los valores y dividiendo entre el número de datos

$$\bar{x} = \frac{\sum_{i=1}^{n} x_i}{n}$$

- Implementación en R: `mean(x)`, función de R base

## Datos de ejemplo
```{r}
#| label: media-aritmetica

# Cargar datos

library(dplyr)
library(readxl) # Para limpiar datos de texto

supercias <- read_excel(here("spanish/data/directorio_companias.xlsx"), 
                        skip = 4) %>%
              janitor::clean_names()

supercias %>%
  head()
```

## Calculando el promedio de capital de suscrito

- Utilizando la función `mean()` de R base

```{r}
#| label: media-aritmetica-capital

library(stringr)
library(dplyr)
library(readr)

# Limpiar datos

supercias_limpio <- 
    supercias %>%
    mutate(capital_suscrito = parse_number(capital_suscrito, locale = locale(decimal_mark = ",", grouping_mark = "."))) %>%
    filter(!is.na(capital_suscrito))

mean(supercias_limpio$capital_suscrito)
```

## Utilizando `mean()` con `na.rm = TRUE`

- Si hay valores faltantes, se puede utilizar el argumento `na.rm = TRUE` para ignorarlos

- No se necesita limpiar los datos previamente con `filter()`

```{r}

supercias_limpio <- 
    supercias %>%
    mutate(capital_suscrito = parse_number(capital_suscrito, locale = locale(decimal_mark = ",", grouping_mark = ".")))

mean(supercias_limpio$capital_suscrito, na.rm = TRUE)
```

## Mediana

- Es el valor que divide a los datos en dos partes iguales

- Para calcularla, se ordenan los datos de menor a mayor y se elige el valor central

- Si el número de datos es par, se promedian los dos valores centrales

$$\text{Mediana} = \begin{cases} x_{\frac{n+1}{2}} & \text{si } n \text{ es impar} \\ \frac{x_{\frac{n}{2}} + x_{\frac{n}{2} + 1}}{2} & \text{si } n \text{ es par} \end{cases}$$

## Calculando la mediana de capital suscrito

- Utilizando la función `median()` de R base

- También con `na.rm = TRUE` para ignorar valores faltantes

```{r}
#| label: mediana-capital

median(supercias_limpio$capital_suscrito, na.rm = TRUE)

```

# Moda

- Es el valor que más se repite en un conjunto de datos

- Puede haber más de una moda

- En R, no hay una función base para calcular la moda

- Se puede utilizar la función `table()` para contar las frecuencias de cada valor

# Calculando la moda de capital suscrito

- Utilizando la función `table()` de R base

```{r}
#| label: moda-capital

table(supercias_limpio$capital_suscrito)
```

## Medidas de dispersión

Las medidas de dispersión indican cuánto se alejan los datos de la medida de tendencia central

- **Rango**: diferencia entre el valor máximo y el valor mínimo
  - $R = x_{\text{max}} - x_{\text{min}}$
  - En R: `range(x)`

- Varianza: promedio de las diferencias al cuadrado entre cada dato y la media
  - $s^2 = \frac{\sum_{i=1}^{n} (x_i - \bar{x})^2}{n-1}$
  - En R: `var(x)`

## Medidas de dispersión

- Desviación estándar: raíz cuadrada de la varianza
  - $s = \sqrt{s^2}$
  - En R: `sd(x)`

- **Coeficiente de variación**: desviación estándar dividida por la media
  - $CV = \frac{s}{\bar{x}}$
  - En R: `sd(x) / mean(x)`
  
## Medidas de posición

- **Cuartiles**: valores que dividen a los datos en cuatro partes iguales
  - **Primer cuartil (Q1)**: valor que deja el 25% de los datos a la izquierda
  - **Segundo cuartil (Q2)**: mediana
  - **Tercer cuartil (Q3)**: valor que deja el 75% de los datos a la izquierda

- **Percentil**: valor que deja una proporción $p$ de los datos a la izquierda
  - **Percentil 25 (P25)**: primer cuartil
  - **Percentil 50 (P50)**: mediana
  - **Percentil 75 (P75)**: tercer cuartil

## Calculando percentiles con R

- Utilizando la función `quantile()` de R base

- Se puede especificar el percentil deseado con el argumento `probs`

```{r}
quantile(supercias_limpio$capital_suscrito, probs = c(0.25, 0.5, 0.75), na.rm = TRUE)
```

# Visualización de datos para variables cuantitativas

## Gráficos con R base

- R base proporciona una serie de funciones para crear gráficos básicos

- Algunas de las funciones más comunes son:
  - `plot()`: gráfico de dispersión
  - `hist()`: histograma
  - `boxplot()`: diagrama de caja y bigotes
  
## Ejemplo con R base: Histograma

- **Histograma**: muestra la distribución de una variable cuantitativa

- La distribución se divide en intervalos o "bins", y se cuenta la frecuencia de datos en cada intervalo

- En R, se puede utilizar la función `hist()` para crear un histograma

- Se puede personalizar el número de intervalos con el argumento `breaks`

## Creando un histograma de capital suscrito

- Utilizando la función `hist()` de R base

```{r}
#| label: histograma-capital

hist(supercias_limpio$capital_suscrito, 
     breaks = 5, 
     main = "Histograma de Capital Suscrito", 
     xlab = "Capital Suscrito", 
     ylab = "Frecuencia")

```
## Creando un histograma de capital suscrito

- Una distribución con valores atípicos complica la visualización

- Se puede utilizar la escala logarítmica para mejorar la visualización

```{r}
#| label: histograma-capital-log

hist(log(supercias_limpio$capital_suscrito), 
     breaks = 5, 
     main = "Histograma de Capital Suscrito (log)", 
     xlab = "Log(Capital Suscrito)", 
     ylab = "Frecuencia")
```

# Gráficos con ggplot2

- `ggplot2` es una librería de R que permite crear gráficos de alta calidad y personalizables

- Utiliza el *Grammar of Graphics* para construir gráficos, definidos por capas diferentes

# Gramatica de gráficos {.smaller}

- Todo gráfico, según el *Grammar of Graphics*, tiene siete posibles capas:

  - **Datos**: conjunto de datos a visualizar
   
  - **Estéticas**: mapeo de variables a atributos visuales (color, forma, tamaño, etc.)
  
  - **Geometrías**: tipo de gráfico (puntos, líneas, barras, etc.)
  
  - **Facetas**: subdivisión de los datos en subgráficos
  
  - **Estadísticas**: resumen de los datos (media, mediana, etc.)
  
  - **Coordenadas**: sistema de coordenadas (cartesiano, polar, etc.)
  
  - **Temas**: aspecto visual del gráfico (colores, fuentes, etc.)

# Gramatica de gráficos

![](ggplot-grammar-of-graphics.png)
  
# Creando un histograma con ggplot2

- Para crear un histograma con `ggplot2`, se utiliza la función `ggplot()` para definir los datos y las estéticas

- Se añade una capa de geometría con `geom_histogram()`

- Se pueden personalizar las etiquetas, títulos, colores, etc.

# Replicando el histograma de capital suscrito con ggplot2

```{r}
#| label: histograma-capital-ggplot

library(ggplot2)

ggplot(supercias_limpio, aes(x = capital_suscrito)) +
  geom_histogram(bins = 5) +
  labs(title = "Histograma de Capital Suscrito", 
       x = "Capital Suscrito", 
       y = "Frecuencia")

```
## Mejorando el histograma con ggplot2

- Este paquete permite una mayor personalización de los gráficos que R base

- Definimos la longitud de los bins, el color de las barras, el color de fondo, etc.

- El uso del pipe `%>%` permite encadenar funciones de manera más sencilla, combinando con `dplyr`

## Histograma de capital suscrito mejorado con ggplot2

```{r}
supercias_limpio %>% 
filter(capital_suscrito > 0, capital_suscrito < 2500000) %>%
ggplot(aes(x = capital_suscrito)) +
  geom_histogram(bins = 5, fill = "skyblue", color = "black") +
  labs(title = "Histograma de Capital Suscrito", 
       x = "Capital Suscrito", 
       y = "Frecuencia") +
  theme_minimal()
```
## Eliminar valores atípicos con ggplot2

- Se pueden filtrar los valores atípicos para mejorar la visualización

- Se utiliza el rango intercuartil (IQR) para identificar los valores atípicos

$$[Q1 - 1.5 \times \text{IQR}, Q3 + 1.5 \times \text{IQR}]$$

## Histograma de capital suscrito sin valores atípicos

```{r}
#| label: histograma-capital-ggplot-filtrado

supercias_limpio %>%
  filter(capital_suscrito > quantile(capital_suscrito, 0.25, na.rm = T) - 1.5 * IQR(capital_suscrito, na.rm = T) &
           capital_suscrito < quantile(capital_suscrito, 0.75, na.rm = T) + 1.5 * IQR(capital_suscrito, na.rm = T)) %>%
  ggplot(aes(x = capital_suscrito)) +
  geom_histogram(bins = 5, fill = "skyblue", color = "black") +
  labs(title = "Histograma de Capital Suscrito", 
       x = "Capital Suscrito", 
       y = "Frecuencia") +
  theme_minimal()
```
## Diagrama de caja (caja y bigotes)

- El diagrama de caja y bigotes muestra la distribución de una variable cuantitativa

- La caja representa el rango intercuartil (IQR), y los bigotes se extienden hasta los valores extremos

- Se pueden identificar valores atípicos

## Diagrama de caja generico

![](image_boxplot.jpg)

## Creando un diagrama de caja con ggplot2

- Utilizando la función `geom_boxplot()` de `ggplot2`

```{r}
#| label: boxplot-capital-ggplot
#| include: true
#| echo: false

supercias_filtrado <-
  supercias_limpio %>%
  filter(capital_suscrito > quantile(capital_suscrito, 0.25, na.rm = T) - 1.5 * IQR(capital_suscrito, na.rm = T) &
           capital_suscrito < quantile(capital_suscrito, 0.75, na.rm = T) + 1.5 * IQR(capital_suscrito, na.rm = T))

supercias_filtrado %>%
  ggplot(aes(x = "", y = capital_suscrito)) +
  geom_boxplot(fill = "skyblue", color = "black") +
  labs(title = "Diagrama de Caja de Capital Suscrito", 
       x = "", 
       y = "Capital Suscrito") +
  theme_minimal()

```

## Creando un diagrama de caja con ggplot2
```{r}
#| label: boxplot-capital-ggplot-grafico
#| include: false

supercias_filtrado <-
  supercias_limpio %>%
  filter(capital_suscrito > quantile(capital_suscrito, 0.25, na.rm = T) - 1.5 * IQR(capital_suscrito, na.rm = T) &
           capital_suscrito < quantile(capital_suscrito, 0.75, na.rm = T) + 1.5 * IQR(capital_suscrito, na.rm = T))

supercias_filtrado %>%
  ggplot(aes(x = "", y = capital_suscrito)) +
  geom_boxplot(fill = "skyblue", color = "black") +
  labs(title = "Diagrama de Caja de Capital Suscrito", 
       x = "", 
       y = "Capital Suscrito") +
  theme_minimal()

```

## Geometrías para diferentes tipos de gráficos	{.smaller}

- `geom_point()`: gráfico de dispersión
- `geom_line()`: gráfico de líneas
- `geom_bar()`: gráfico de barras
- `geom_boxplot()`: diagrama de caja y bigotes
- `geom_histogram()`: histograma
- `geom_density()`: densidad
- `geom_violin()`: violín
- `geom_text()`: texto
- `geom_label()`: etiquetas

- Se puede usar en combinación (ej. `geom_point() + geom_line()`)

## Distribuciones acumuladas 

- La distribución acumulada muestra la proporción de datos menores o iguales a un valor dado

- Generalmente se construyen intervalos o bins y se calcula la frecuencia en cada intervalo
  - La frecuencia acumulada es la suma de las frecuencias de los intervalos anteriores (i.e. running total)

- Generalmente primero se prepara una tabla de distrubución de frecuencias, se calculan frecuencias acumuladas absolutas (Frecuencia Acumulada) y relativas (dividiendo por el total de datos). 

- La ojiva es el gráfico de la distribución acumulada

## Implementación en R 

- Se puede generar una tabla de frecuencias con la función `cut()` y un workflow `dplyr` con `group_by()` y `summarise()`

- Se necesita decidir el número de intervalos o bins mediante `breaks`

- `cut` divide los datos en intervalos, y `table` cuenta la frecuencia de datos en cada intervalo

## Para capital suscrito

```{r}
#| label: tabla-frecuencias-acumuladas

tabla_frecuencias <- supercias_filtrado %>%
  mutate(intervalo = cut(capital_suscrito, breaks = 5)) %>% # Dividir en 5 intervalos
  group_by(intervalo) %>% # Agrupar por intervalo
  summarise(frecuencia = n()) %>% # Contar frecuencia
  mutate(frecuencia_acumulada = cumsum(frecuencia), # Frecuencia acumulada
         frecuencia_relativa = frecuencia / sum(frecuencia)) # Frecuencia relativa

tabla_frecuencias
```

## Gráfico de la distribución acumulada

- Utilizando la función `geom_line()` de `ggplot2`, se puede crear la ojiva graficando la tabla calculada previamente

```{r}
#| label: ojiva-capital-suscrito

tabla_frecuencias %>%
  ggplot(aes(x = intervalo, y = frecuencia_acumulada, group = 1)) +
  geom_line(color = "skyblue") +
  labs(title = "Ojiva de Capital Suscrito", 
       x = "Intervalo", 
       y = "Frecuencia Acumulada") +
  theme_minimal()

```

<!-- Se puede incluir en barras los intervalos con su frecuencia absoluta, no acumulada -->

# Análisis de datos categóricos

- Generalmente, nos interesa la frecuencia de ocurrencia de categorías
  - La frecuencia relativa o porcentaje de cada categoría es útil para comparar entre categorías
  - Utilizamos tablas de frecuencias y gráficos para visualizar la distribución de categorías
  - Calculamos frecuencias con workflows `dplyr` con `group_by()` y `summarise()`

- Para variables categóricas, se pueden utilizar diferentes tipos de gráficos

- Algunos de los gráficos más comunes son:
  - Gráfico de barras
  - Gráfico de pastel
  - Treeplot

## Gráfico de barras

- El gráfico de barras es una forma sencilla de visualizar la frecuencia de una variable categórica

- En el eje x se muestran las categorías, y en el eje y la frecuencia

- En algunos casos, es válido apilar barras para mostrar la frecuencia de subcategorías

- Generalmente los gráficos de barras son verticales, pero también pueden ser horizontales

- Utiles con un número moderado de categorías

## Creando un gráfico de barras con ggplot2

- Utilizando la función `geom_bar()` de `ggplot2`

- Se puede personalizar el color, el orden de las barras, las etiquetas, etc.

- La función `geom_bar()` cuenta automáticamente la frecuencia de cada categoría

## Empresas por provincia

```{r}
#| label: grafico-barras-provincia

supercias_filtrado %>%
  ggplot(aes(x = provincia)) +
  geom_bar(fill = "skyblue", color = "black") +
  labs(title = "Empresas por Provincia", 
       x = "Provincia", 
       y = "Frecuencia") +
  theme_minimal()
```

## Empresas por provincia

- La funcion `top_n()` de `dplyr` permite seleccionar las `n` categorías más frecuentes

- Se puede utilizar para filtrar las 5 provincias con más empresas

```{r}
#| label: grafico-barras-provincia-top5
#| results: false

library(forcats)

supercias_filtrado %>%
  count(provincia) %>% # Count rapidamente cuenta la frecuencia de cada categoria
  top_n(5, n) %>%
  ggplot(aes(x = fct_reorder(provincia, n), y = n)) +
  geom_bar(stat = "identity", fill = "skyblue", color = "black") +
  labs(title = "Top 5 Provincias con más Empresas", 
       x = "Provincia", 
       y = "Frecuencia") +
  theme_minimal()
```

## Empresas por provincia
```{r}
#| label: grafico-barras-provincia-top5-grafico
#| echo: false

library(forcats)

supercias_filtrado %>%
  count(provincia) %>% # Count rapidamente cuenta la frecuencia de cada categoria
  top_n(5, n) %>%
  ggplot(aes(x = fct_reorder(provincia, n), y = n)) +
  geom_bar(stat = "identity", fill = "skyblue", color = "black") +
  labs(title = "Top 5 Provincias con más Empresas", 
       x = "Provincia", 
       y = "Frecuencia") +
  theme_minimal()
```

## `geom_bar()` y `geom_col()`

- `geom_bar()` es una abreviatura de `geom_bar(stat = "count")`, que cuenta la frecuencia de cada categoría

- `geom_col()` es una abreviatura de `geom_bar(stat = "identity")`, que utiliza los valores de la variable y para la altura de las barras

- Se puede utilizar `geom_col()` para gráficos de barras con valores precalculados, es decir, cuando ya se tiene la frecuencia de cada categoría

- Es más flexible que `geom_bar()`, ya que permite utilizar valores precalculados, no solo frecuencias

## Columnas apiladas

- En algunos casos, es útil apilar las barras para mostrar la frecuencia de subcategorías

- Se puede utilizar el argumento `fill` en `aes()` para apilar las barras, utilizando una variable categórica adicional

- Se recomienda utilizar `geom_col()` y adecuadamente prepara los datos en formato largo (long format) - realizar un `pivot_longer()` con `tidyr` si es necesario

## Empresas por provincia y sector (CIIU)

- Ordenamos las primeras 5 provincias con más empresas y los CIIU de nivel 1
```{r}
#| label: grafico-barras-provincia-sector
#| results: false
supercias_filtrado %>% 
  group_by(provincia, ciiu_nivel_1) %>%
  summarise(frecuencia = n()) %>%
  filter(provincia %in% c("EL ORO", "MANABI", "AZUAY", "PICHINCHA", "GUAYAS")) %>%
  ggplot(aes(x = provincia, y = frecuencia, fill = ciiu_nivel_1)) +
  geom_col(position = "stack") +
  labs(title = "Empresas por Provincia y Sector (CIIU)", 
       x = "Provincia", 
       y = "Frecuencia",
       fill = "Sector (CIIU)") +
  theme_minimal()
```

## Empresas por provincia y sector (CIIU)

```{r}
#| label: grafico-barras-provincia-sector-grafico
#| echo: false
supercias_filtrado %>% 
  group_by(provincia, ciiu_nivel_1) %>%
  summarise(frecuencia = n()) %>%
  filter(provincia %in% c("EL ORO", "MANABI", "AZUAY", "PICHINCHA", "GUAYAS")) %>%
  ggplot(aes(x = provincia, y = frecuencia, fill = ciiu_nivel_1)) +
  geom_col(position = "stack") +
  labs(title = "Empresas por Provincia y Sector (CIIU)", 
       x = "Provincia", 
       y = "Frecuencia",
       fill = "Sector (CIIU)") +
  theme_minimal()
```
